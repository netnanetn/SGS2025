@page "/vehicles"
@inject VehicleService _vehicleService
@inject ExcelVehicleService _excelVehicleService
@inject IJSRuntime JS

<div class="input-group mb-3" >
    <InputText @bind-Value="searchText" class="form-control" placeholder="🔍 Tìm xe..." />
    <button class="btn btn-primary" @onclick="Search">Tìm</button>
    <button class="btn btn-secondary" @onclick="ResetSearch">Reset</button>
</div>
<button class="btn btn-primary mb-2" @onclick="ShowAddForm">➕ Thêm Xe</button>
<button class="btn btn-primary mb-2" @onclick="ExportExcel">Xuất excel</button>
<button class="btn btn-primary mb-2" @onclick="ImportExcel">Nhập từ Excel</button>

@if (editVehicle != null)
{
    <EditForm Model="editVehicle" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-2">
            <label>Mã Xe:</label>
            <InputText id="vehicleCodeInput" class="form-control" @bind-Value="editVehicle.VehiceCode" />
        </div>
        <div class="mb-2">
            <label>Tài xế:</label>
            <InputText class="form-control" @bind-Value="editVehicle.DriverName" />
        </div>
        <div class="mb-2">
            <label>Điện thoại:</label>
            <InputText class="form-control" @bind-Value="editVehicle.DriverPhone" />
        </div>
        <div class="mb-2">
            <label>Trọng tải:</label>
            <InputNumber class="form-control" @bind-Value="editVehicle.TonnageDefault" />
        </div>
        <div class="mb-2">
            <label>Công ty:</label>
            <InputText class="form-control" @bind-Value="editVehicle.TransportationCompany" />
        </div>

        <button type="submit" class="btn btn-success">💾 Lưu</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">❌ Hủy</button>
    </EditForm>
}

@if (vehicles == null)
{
    <p><em>Đang tải...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Mã Xe</th>
                <th>Tài xế</th>
                <th>Điện thoại</th>
                <th>Trọng tải</th>
                <th>Công ty</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var v in vehicles)
            {
                <tr>
                    <td>@v.VehiceCode</td>
                    <td>@v.DriverName</td>
                    <td>@v.DriverPhone</td>
                    <td>@v.TonnageDefault</td>
                    <td>@v.TransportationCompany</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => Edit(v)">✏️ Sửa</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => Delete(v.Id)">🗑️ Xóa</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    List<TblVehicle>? vehicles;
    TblVehicle? editVehicle;
    string searchText = string.Empty; 
    bool shouldFocus = true;     // đánh dấu cần focus

    protected override async Task OnInitializedAsync()
    { 
        vehicles =  await _vehicleService.GetAllAsync(); 
    }
    async Task Search()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            vehicles = await _vehicleService.GetAllAsync();
        }
        else
        {
            vehicles = await _vehicleService.SearchAsync(searchText);
        }
    }

    async Task ResetSearch()
    {
        searchText = string.Empty;
        vehicles = await _vehicleService.GetAllAsync();
    }
    async Task ShowAddForm()
    {
        editVehicle = new TblVehicle();
        shouldFocus = true;     // đánh dấu cần focus
    }
    private async Task ExportExcel()
    {
        var path = await _excelVehicleService.ExportToDownloadsAsync(vehicles);
        // Có thể mở luôn sau khi export
        await Launcher.OpenAsync(new OpenFileRequest
            {
                File = new ReadOnlyFile(path)
            });
    }
    private async Task ImportExcel()
    {
        var customFileType = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>>
    {
        { DevicePlatform.iOS, new[] { "com.microsoft.excel.xlsx" } },     // UTI Excel
        { DevicePlatform.Android, new[] { "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" } }, // MIME type
        { DevicePlatform.WinUI, new[] { ".xlsx" } },                      // Windows extension
        { DevicePlatform.MacCatalyst, new[] { "com.microsoft.excel.xlsx" } }
    });

        var file = await FilePicker.Default.PickAsync(new PickOptions
            {
                PickerTitle = "Chọn file Excel",
                FileTypes = customFileType
            });

        if (file != null)
        {
            vehicles = await _excelVehicleService.ImportFromExcelAsync(file.FullPath);
        }
    }
    async Task Edit(TblVehicle v)
    {
        editVehicle = new TblVehicle
            {
                Id = v.Id,
                VehiceCode = v.VehiceCode,
                DriverName = v.DriverName,
                DriverPhone = v.DriverPhone,
                TonnageDefault = v.TonnageDefault,
                TransportationCompany = v.TransportationCompany
            };
        shouldFocus = true;     // đánh dấu cần focus
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldFocus)
        {
            shouldFocus = false; // reset flag
            await JS.InvokeVoidAsync("siteHelpers.focusAndScroll", "vehicleCodeInput", null);
        }
    }
    async Task Save()
    {
        if (editVehicle == null) return;

        if (editVehicle.Id == 0)
            await _vehicleService.AddAsync(editVehicle);
        else
            await _vehicleService.UpdateAsync(editVehicle);

        vehicles = await _vehicleService.GetAllAsync();
        editVehicle = null;
        StateHasChanged();
        var toast = CommunityToolkit.Maui.Alerts.Toast.Make("Đã lưu thành công!", ToastDuration.Short, 14);
        await toast.Show();
    }

    async Task Delete(int id)
    {
        await _vehicleService.DeleteAsync(id);
        vehicles = await _vehicleService.GetAllAsync();
        var toast = CommunityToolkit.Maui.Alerts.Toast.Make("Đã xóa thành công!", ToastDuration.Short, 14);
        await toast.Show();
    }

    void Cancel() => editVehicle = null;
}
