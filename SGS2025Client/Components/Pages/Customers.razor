@page "/customers"

@inject CustomerService _customerService
@inject IJSRuntime JS

<div class="input-group mb-3">
    <InputText @bind-Value="searchText" class="form-control" placeholder="🔍 Tìm khách hàng..." />
    <button class="btn btn-primary" @onclick="Search">Tìm</button>
    <button class="btn btn-secondary" @onclick="ResetSearch">Reset</button>
</div>

<button class="btn btn-primary mb-2" @onclick="ShowAddForm">➕ Thêm Khách hàng</button>

@if (editCustomer != null)
{
    <EditForm Model="editCustomer" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-2">
            <label>Mã KH:</label>
            <InputText id="customerCodeInput" class="form-control" @bind-Value="editCustomer.Code" />
        </div>
        <div class="mb-2">
            <label>Tên KH:</label>
            <InputText class="form-control" @bind-Value="editCustomer.Name" />
        </div>
        <div class="mb-2">
            <label>Địa chỉ:</label>
            <InputText class="form-control" @bind-Value="editCustomer.Address" />
        </div>
        <div class="mb-2">
            <label>Điện thoại:</label>
            <InputText class="form-control" @bind-Value="editCustomer.Phone" />
        </div>
        <div class="mb-2">
            <label>Email:</label>
            <InputText class="form-control" @bind-Value="editCustomer.Email" />
        </div>
        <div class="mb-2">
            <label>Công nợ đầu kỳ:</label>
            <InputNumber class="form-control" @bind-Value="editCustomer.DebtFirst" />
        </div>
        <div class="mb-2">
            <label>Tài khoản NH:</label>
            <InputText class="form-control" @bind-Value="editCustomer.BankAccount" />
        </div>
        <div class="mb-2">
            <label>Ghi chú:</label>
            <InputText class="form-control" @bind-Value="editCustomer.Note" />
        </div>
        <div class="mb-2">
            <label>Công ty:</label>
            <InputNumber class="form-control" @bind-Value="editCustomer.CompanyId" />
        </div>

        <button type="submit" class="btn btn-success">💾 Lưu</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">❌ Hủy</button>
    </EditForm>
}

@if (customers == null)
{
    <p><em>Đang tải...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Mã KH</th>
                <th>Tên</th>
                <th>Điện thoại</th>
                <th>Email</th>
                <th>Địa chỉ</th>
                <th>Công nợ</th>
                <th>Ngân hàng</th>
                <th>Ghi chú</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in customers)
            {
                <tr>
                    <td>@c.Code</td>
                    <td>@c.Name</td>
                    <td>@c.Phone</td>
                    <td>@c.Email</td>
                    <td>@c.Address</td>
                    <td>@c.DebtFirst</td>
                    <td>@c.BankAccount</td>
                    <td>@c.Note</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => Edit(c)">✏️ Sửa</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => Delete(c.Id)">🗑️ Xóa</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<TblCustomer>? customers;
    TblCustomer? editCustomer;
    string searchText = string.Empty;
    bool shouldFocus = true;

    protected override async Task OnInitializedAsync()
    {
        customers = await _customerService.GetAllAsync();
    }

    async Task Search()
    {
        if (string.IsNullOrWhiteSpace(searchText))
            customers = await _customerService.GetAllAsync();
        else
            customers = await _customerService.SearchAsync(searchText);
    }

    async Task ResetSearch()
    {
        searchText = string.Empty;
        customers = await _customerService.GetAllAsync();
    }

    async Task ShowAddForm()
    {
        editCustomer = new TblCustomer();
        shouldFocus = true;
    }

    async Task Edit(TblCustomer c)
    {
        editCustomer = new TblCustomer
            {
                Id = c.Id,
                Code = c.Code,
                Name = c.Name,
                Address = c.Address,
                Phone = c.Phone,
                Email = c.Email,
                DebtFirst = c.DebtFirst,
                BankAccount = c.BankAccount,
                Note = c.Note,
                CompanyId = c.CompanyId
            };
        shouldFocus = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldFocus)
        {
            shouldFocus = false;
            await JS.InvokeVoidAsync("siteHelpers.focusAndScroll", "customerCodeInput", null);
        }
    }

    async Task Save()
    {
        if (editCustomer == null) return;

        if (editCustomer.Id == 0)
            await _customerService.AddAsync(editCustomer);
        else
            await _customerService.UpdateAsync(editCustomer);

        customers = await _customerService.GetAllAsync();
        editCustomer = null;
        StateHasChanged();
        var toast = CommunityToolkit.Maui.Alerts.Toast.Make("Đã lưu thành công!", ToastDuration.Short, 14);
        await toast.Show();
    }

    async Task Delete(int id)
    {
        await _customerService.DeleteAsync(id);
        customers = await _customerService.GetAllAsync();
        var toast = CommunityToolkit.Maui.Alerts.Toast.Make("Đã xóa thành công!", ToastDuration.Short, 14);
        await toast.Show();
    }

    void Cancel() => editCustomer = null;
}